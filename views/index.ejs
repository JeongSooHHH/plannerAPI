
<!doctype html>
<!-- 메인 페이지에 아임포투 결제 추가함 테스트용 -->

<head>
    <script src="../Downloads/jquery-3.6.3.js"></script>
    <script type="text/javascript" src="https://code.jquery.com/jquery-1.12.4.min.js" ></script>
    <script type="text/javascript" src="https://cdn.iamport.kr/js/iamport.payment-1.2.0.js"></script>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    <link rel="stylesheet" href="public/main.css">

    <title>Hello, world!</title>
    
  </head>
  <body>
  
   <%- include('nav.html') %> 

   <div class="container ml-4 mt-4">
    <h4>개인 일정 관리.</h4>
    <h5>빈칸을 채워주세요.</h3>
    <label>이름
      <input type="text" id="name">
    </label>
    <br>
    <label>나이
      <input type="number" id="age">
    </label>
    <br>
    <label>취미
      <input type="type" id="hobby">
    </label>
      <button class="btn btn-warning" id="click">생성</button>
      <p id="result"></p>

   </div>
   <button onclick="requestPay()">결제하기</button>
   <script>
//     const db = require("../server");
//     import  { MongoClient }  from 'mongodb';
//     const MongoClient = require('mongodb').MongoClient;
//     var db;

//     MongoClient.connect(process.env.DB_URL, function(error, client){
//     if(error) return console.log(error)     
//         db = client.db('todoapp');
//         http.listen(process.env.PORT, function(){ 
//         console.log('listening on 8080')
//     });
// })  // 위에 구문 의미없음...`

    function requestPay() {
      IMP.init("imp37633130");  

      IMP.request_pay({
        pg : 'html5_inicis',  //kakaopay 넣으면 카톡결제
        pay_method : 'card',
        merchant_uid : `merchant_ ${year + month + day}-${hours + minutes}2`,
        name : '주문명:결제테스트',
        amount : 100,
        buyer_email : 'space2577@gmail.com',
        buyer_name : '구매자이름',
        buyer_tel : '010-1234-5678',
        buyer_addr : '서울특별시 강남구 삼성동',
        buyer_postcode : '123-456'
    }, function (rsp) { // callback
      if (rsp.success) { // 결제 성공 시: 결제 승인 또는 가상계좌 발급에 성공한 경우
        // jQuery로 HTTP 요청
        jQuery.ajax({
            url: "http://onecue.cafe24app.com/api/pay/complete", //"http://localhost:8080/payments/complete", 
            method: "POST",
            headers: { "Content-Type": "application/json" },
            data: {
                imp_uid: rsp.imp_uid,
                merchant_uid: rsp.merchant_uid
            }
        }).done(function (data) {
          jQuery.ajax('.restext').append('결재 성공.');
           console.log(data);
        })
      } else {
        alert("결제에 실패하였습니다. 에러 내용: " +  rsp.error_msg);
      }});
    }

//     app.post('/register', function(req, res){ // 
//     db.collection('payment').insertOne({ 
      
//       name: rsp.name,   
//       amount: rsp.amount, 
//       buyer_email: rsp.buyer_email,
//       buyer_name: rsp.buyer_name,
//       buyer_tel: rsp.buyer_tel,
//     }, console.log(name),
//     function(error, result){
//         res.redirect('/');
//     })
// })
    // async function funcInsert(queryObj){
    //   let clinet = await my
    // }
    // todoapp.collection('posts').insertOne({
    //   name: rsp.name,
    //   amount: rsp.amount,
    //   buyer_email: rsp.buyer_email,
    //   buyer_name: rsp.buyer_name,
    //   buyer_tel: rsp.buyer_tel,
    // });

//  app.post("/test", async(req,res)=>{
//   todoapp.message.insertOne({content: buyer_email, userid: buyer_name})
//  })   
    
    app.use(bodyParser.json());
    
    // "/payments/complete/mobile/"에 대한 GET 요청을 처리
    app.get("/payments/complete/mobile/", async (req, res) => {
      try {
          const { imp_uid, merchant_uid } = req.query; // req의 query에서 imp_uid, merchant_uid 추출
          // 액세스 토큰(access token) 발급 받기
          const getToken = await axios({
            url: "https://api.iamport.kr/users/getToken",
            method: "post", // POST method
            headers: { "Content-Type": "application/json" }, // "Content-Type": "application/json"
            data: {
              imp_key: "3758255558652675", // REST API 키
              imp_secret: "UT9lDANuxUiiBlgbF05iyY53VGt0pGr1pnlOH6Ad6p0govdeX17WJ10oS8vbOKlNN0G03zAmWWbU0jVP" // REST API Secret
            }
          });
          const { access_token } = getToken.data.response; // 인증 토큰
          console.log(access_token,'================')
          // imp_uid로 아임포트 서버에서 결제 정보 조회
          const getPaymentData = await axios({
            url: `https://api.iamport.kr/payments/${imp_uid}`, // imp_uid 전달
            method: "get", // GET method
            headers: { "Authorization": access_token } // 인증 토큰 Authorization header에 추가
          });
          const paymentData = getPaymentData.data.response; // 조회한 결제 정보
          console.log(paymentData)
          // DB에서 결제되어야 하는 금액 조회
          const order = await Orders.findById(paymentData.merchant_uid);
          console.log(order)
          const amountToBePaid = order.amount; // 결제 되어야 하는 금액
          
          // 결제 검증하기
          const { amount, status } = paymentData;
          if (amount === amountToBePaid) { // 결제금액 일치. 결제 된 금액 === 결제 되어야 하는 금액
            await Orders.findByIdAndUpdate(merchant_uid, { $set: paymentData }); // DB에 결제 정보 저장
            switch (status) {
              case "ready": // 가상계좌 발급
                // DB에 가상계좌 발급 정보 저장
                const { vbank_num, vbank_date, vbank_name } = paymentData;
                await Users.findByIdAndUpdate("/* 고객 id */", { $set: { vbank_num, vbank_date, vbank_name }});
                // 가상계좌 발급 안내 문자메시지 발송
                SMS.send({ text:  `가상계좌 발급이 성공되었습니다. 계좌 정보 \${vbank_num} \${vbank_date} \${vbank_name} `});
                res.send({ status: "vbankIssued", message: "가상계좌 발급 성공" });
                break;
              case "paid": // 결제 완료
                res.send({ status: "success", message: "일반 결제 성공" });
                break;
            }
          } else { // 결제금액 불일치. 위/변조 된 결제
            throw { status: "forgery", message: "위조된 결제시도" };
          }
        } catch (e) {
          res.status(400).send(e);
        }
    });

    app.post("/payments/complete", async (req, res) => {
    try {
      const { imp_uid, merchant_uid } = req.body; // req의 body에서 imp_uid, merchant_uid 추출
      // 액세스 토큰(access token) 발급 받기
          const getToken = await axios({
            url: "https://api.iamport.kr/users/getToken",
            method: "post", // POST method
            headers: { "Content-Type": "application/json" }, // "Content-Type": "application/json"
            data: {
              imp_key: "imp_apikey", // REST API 키
              imp_secret: "ekKoeW8RyKuT0zgaZsUtXXTLQ4AhPFW3ZGseDA6bkA5lamv9OqDMnxyeB9wqOsuO9W3Mx9YSJ4dTqJ3f" // REST API Secret
            }
          });
      // imp_uid로 아임포트 서버에서 결제 정보 조회
      const getPaymentData = await axios({
            url: `https://api.iamport.kr/payments/${imp_uid}`, // imp_uid 전달
            method: "get", // GET method
            headers: { "Authorization": access_token } // 인증 토큰 Authorization header에 추가
          });

      const paymentData = getPaymentData.data.response; // 조회한 결제 정보
      
      // DB에서 결제되어야 하는 금액 조회
      const order = await Orders.findById(paymentData.merchant_uid);
      const amountToBePaid = order.amount; // 결제 되어야 하는 금액
      
      // 결제 검증하기
      const { amount, status } = paymentData;
      if (amount === amountToBePaid) { // 결제금액 일치. 결제 된 금액 === 결제 되어야 하는 금액
        await Orders.findByIdAndUpdate(merchant_uid, { $set: paymentData }); // DB에 결제 정보 저장
        
        switch (status) {
          case "ready": // 가상계좌 발급
            // DB에 가상계좌 발급 정보 저장
            const { vbank_num, vbank_date, vbank_name } = paymentData;
            await Users.findByIdAndUpdate("/* 고객 id */", { $set: { vbank_num, vbank_date, vbank_name }});
            // 가상계좌 발급 안내 문자메시지 발송
            SMS.send({ text: `가상계좌 발급이 성공되었습니다. 계좌 정보 ${vbank_num} ${vbank_date} ${vbank_name}`});
            res.send({ status: "vbankIssued", message: "가상계좌 발급 성공" });
            break;
          case "paid": // 결제 완료
            res.send({ status: "success", message: "일반 결제 성공" });
            break;
        }
      } else { // 결제금액 불일치. 위/변조 된 결제
        throw { status: "forgery", message: "위조된 결제시도" };
      }
    } catch (e) {
      res.status(400).send(e);
    }
  });




    

  </script>
   <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
     <script>
      $('#click').click(function(e){
        $('#result').append("안녕하세요! 제 이름은 " + $('#name').val() +" 입니다. 나이는 " + $('#age').val() + " 살 이고요, "+ $('#hobby').val() + "를 좋아합니다. 잘 부탁드립니다.<br>");
       })
     </script>

    <!-- Optional JavaScript; choose one of the two! -->

    <!-- Option 1: jQuery and Bootstrap Bundle (includes Popper) 
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-Fy6S3B9q64WdZWQUiU+q4/2Lc9npb8tCaSX9FK7E8HnRr0Jz8D6OP9dO5Vg3Q9ct" crossorigin="anonymous"></script>

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <!--
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js" integrity="sha384-+sLIOodYLS7CIrQpBjl+C7nPvqq+FbNUBDunl/OZv93DB7Ln/533i8e/mZXLi/P+" crossorigin="anonymous"></script>
    -->
  
  </body>
</html>